Thread 종료 방법
	1. 필드에 boolean 타입의 변수를 선언하고 run()안에 있는 반복문에 해당 변수가 true일 경우 break 하도록 설계한다.
	2. sleep() 또는 wait(), join() 등의 메소드를 통해 쓰레드 일시정지 상태일 경우
	   쓰레드객체.interrupt()를 사용하여 interruptedException을 발생시킨다.
	   이 때 일시정지시킨 메소드 부분의 catch를 통해 예외를 잡아주고 원하는 문장을 작성한다.
	3. 쓰레드를 일시정지하는 코드가 없을 경우 Thread.currentThread().isInterrupted() 상태를 확인한다.
	   쓰레드객체.interrupt() 사용 시 Thread.currentThread().isInterrupted()의 상태는 true로 변경된다.
	   ※ 지금 상황에서는 Thread.currentThread().isInterrupted()와 Thread.interrupted()는 차이가 없다.
	4. System.exit(0)를 사용하면 전체 쓰레드 종료(프로세스 종료)

	※ 쓰레드가 일시정지되었을 때 종료하는 것이 올바른 종료 방법이다.
=================================================================================================================
파일 입출력
	Stream이라는 연결통로를 통해 원본 데이터가 알맞은 인코딩 방식으로 전송된다.
	byte단위로 입출력되기 때문에 개별처리이며, 상세 연산이 필요하지 않다면
	Buffer를 사용한 입출력을 권장한다. Buffer를 사용하면 일괄처리가 가능해진다.]

Writer(출력)
	BufferedWriter
		버퍼를 사용하는 출력 클래스

	FileWriter
		전달한 경로의 파일을 출력하기 위한 목적으로 열어준다.
		전달한 경로에 파일이 없다면 새롭게 만든 후 열어준다.
	

Reader(입력)
	BufferedReader
		버퍼를 사용하는 입력 클래스

	FileReader
		전달한 경로의 파일을 입력하기 위한 목적으로 열어준다.
		전달한 경로에 파일이 없으면 FileNotFoundException이 발생한다.

File(파일 정보)
	전달한 경로에 있는 파일의 정보를 담는 타입
	디렉터리 생성, 해당 경로의 전체 파일 목록, 파일 삭제 등
=================================================================================================================
Java 핵심 개념

배열
	- 인덱스, 값, 주소값, 반복문

메소드
	- 받을 것 받고 줄 것 주자

클래스
	- 자기주도적으로 만들자!
	- 제발 자료형으로 보자
	- 필드 구성 할 컨벤션 확인
		전역변수
		기본 생성자
		초기화 생성자
		getter, setter
		일반 메소드
		toString()
		hashCode()
		equals()
	- 사용 똑바로 하자

	객체화로 쓸 것인가? 개인 전용, 개별 적용
	static으로 쓸 것인가? 공용, 전체 적용	

상속
	- super, this 구분
	- 제발 부모 클래스 좀 확인해주세요
	- 모든 자식은 부모타입이다.

Casting
	- 자식을 부모타입으로 묶어서 복구하고 사용하자!

인터페이스
	- 강제성, 추상메소드, 상수, final static
	- 나중에 알게 될 것들 -> 추상화(JPA) and 회사내에서 우리만의 규칙? 룰? format(형식)

익명 클래스
	- 구현 안 한 것 구현해

람다
	- 익명 클래스 이해되고나서 돌입
	- 화살표 잘 쓰자
	- 참조형 못 쓰면 제발 쓰지마라!
	- 단위 테스트

★Collection Framework
	★★List, ArrayList
	Set
	Map(JSON)
	★★★Stream API(화살표) - 코딩 테스트에서 많이 나옴







