2차원 배열: 배열 안에 배열 ※ 행부터 접근 !!!

	1차원 배열을 여러 개 선언하면, 관리하기 어렵다.
	2차원 배열을 한 번만 선언하자!

	※ 2차원 배열부터은 메모리 낭비가 심하므로 선호하지 않는다.

2차원 배열 선언
	자료형[][] 배열명 = {{값1, 값2, 값3, ...}, {값4, 값5, 값6, ...}};
	자료형[][] 배열명 = new 자료형[행][열];
	자료형[][] 배열명 = null;

	int[][] arrData = new int[2][3];

	□		arrData		arrData.length: 행의 길이
	□□		arrData[행]	arrData[0].length: 열의 길이
	□□□ □□□		arrData[행][열]
=====================================================================================
메소드
	이름 뒤에 소괄호
	단, 키워드 뒤에 소괄호는 메소드가 아니다.
	저장공간이다.

	f	(x)	=	2x + 1
	메소드	매개		리턴값
	이름	변수

메소드 선언
	(1)리턴타입 (2)메소드명 (자료형 (3)매개변수명, ...) {
		(4) 실행할 문장
		(5) return 리턴값;
	}

	(1) 리턴 값이 있다면 리턴 값의 자료형을 작성하고, 리턴 값이 없다면 void를 작성한다.
	(2) 동사로 작성한다(연필(매개변수)을 쓴다(메소드)).
	(3) 외부에서 전달받을 값이 있다면, 자료형과 순서에 맞게 선언해준다.
	    생략이 가능하지만, 외부에서 값을 전달받을 수 없게 된다.
	(4) 생략이 가능하다. 메소드의 기능을 구현하는 로직을 작성한다.
	(5) 생략이 가능하다. 리턴값이 있다면, 사용한 부분 통채로를 리턴값으로 봐야한다.

메소드 선언 순서
	문제) 두 정수의 덧셈 메소드 선언

	1. 메소드 이름을 생각한다.
		add(){}
	2. 매개변수를 생각한다.
		add(int number1, int number2){}
	3. 실행할 문장을 작성한다.
		add(int number1, int number2) {
			int result = number1 + number2;
		}
	4. 리턴 값을 작성한다.
		add(int number1, int number2) {
			int result = number1 + number2;
			return result;
		}
	5. 리턴 타입을 결정한다.
		int add(int number1, int number2) {
			int result = number1 + number2;
			return result;
		}

메소드 주의사항
	1. 메소드를 선언할 때 {}가 있으며, 반드시 메소드 밖에서 선언한다. 메소드는 다 별개다. 다른 메소드 안에서 선언 X
	2. 메소드를 사용할 때 {}가 없으며, 반드시 메소드 안에서 사용한다.

메소드를 사용하는 이유
	1. 재사용(특정성을 부여해서는 안 된다).
	2. 소스코드 간결화
--------------------------------------------------------------------------------------------------------


















